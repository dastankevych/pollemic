"""add tables

Revision ID: 3ae60b493e7e
Revises: 343bb188ff78
Create Date: 2025-01-28 20:24:29.429749

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import Enum
from sqlalchemy.dialects import postgresql
from infrastructure.database.models.users import UserRole

# revision identifiers, used by Alembic.
revision: str = '3ae60b493e7e'
down_revision: Union[str, None] = '343bb188ff78'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    user_role_enum = Enum(UserRole, name='user_role_enum')
    user_role_enum.create(op.get_bind(), checkfirst=True)
  
    op.create_table('groups',
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('group_id')
    )
    op.create_table('admin_profiles',
    sa.Column('admin_id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('access_level', sa.Integer(), nullable=False),
    sa.Column('administrative_role', sa.String(length=100), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('admin_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('mentor_profiles',
    sa.Column('mentor_id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('specialization', sa.String(length=100), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('mentor_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('questionnaires',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=False),
    sa.Column('questions', sa.JSON(), nullable=False),
    sa.Column('created_by', sa.BigInteger(), nullable=False),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student_profiles',
    sa.Column('student_id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('year_of_study', sa.Integer(), nullable=False),
    sa.Column('major', sa.String(length=100), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('student_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('questionnaire_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('questionnaire_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ),
    sa.ForeignKeyConstraint(['questionnaire_id'], ['questionnaires.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questionnaire_responses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.BIGINT(), nullable=False),
    sa.Column('answers', sa.JSON(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['questionnaire_assignments.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('users', sa.Column('role', user_role_enum, nullable=False))
    op.add_column('users', sa.Column('student_id', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('department', sa.String(length=100), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'department')
    op.drop_column('users', 'student_id')
    op.drop_column('users', 'role')
    op.drop_table('questionnaire_responses')
    op.drop_table('questionnaire_assignments')
    op.drop_table('student_profiles')
    op.drop_table('questionnaires')
    op.drop_table('mentor_profiles')
    op.drop_table('admin_profiles')
    op.drop_table('groups')

    user_role_enum = Enum(UserRole, name='user_role_enum')
    user_role_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
