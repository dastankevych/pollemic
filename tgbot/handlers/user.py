from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.misc.states import QuestionnaireAnswering
from tgbot.keyboards.inline import get_confirm_cancel_keyboard

user_router = Router()


@user_router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: Message, state: FSMContext, repo: RequestsRepo):
    """Handle deep link start command"""
    # Extract action and payload from deep link
    args = message.get_args()
    action, *payload = args.split('_')

    if action == 'q' and payload:
        try:
            # Get assignment details
            assignment_id = int(payload[0])
            assignment = await repo.questionnaires.get_assignment(assignment_id)

            if not assignment:
                await message.answer("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
                return

            if not assignment.is_active:
                await message.answer("‚ùå –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
                return

            # Check if user already completed this questionnaire
            user_responses = await repo.responses.get_user_responses(
                assignment_id=assignment_id,
                user_id=message.from_user.id
            )

            if user_responses and user_responses.is_completed:
                await message.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
                return

            # Store assignment ID and reset question index in state
            await state.set_state(QuestionnaireAnswering.answering)
            await state.update_data(
                assignment_id=assignment_id,
                current_question=0,
                answers={},
                total_questions=len(assignment.questionnaire.questions)
            )

            # Show questionnaire intro
            questionnaire = assignment.questionnaire
            await message.answer(
                f"üìù <b>{questionnaire.title}</b>\n\n"
                f"{questionnaire.description}\n\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questionnaire.questions)}\n"
                f"–ù–∞—á–Ω–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!"
            )

            # Show first question
            await show_current_question(message, state, repo)

        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            await state.clear()
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


@user_router.message(CommandStart())
async def user_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


async def show_current_question(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # Get current data from state
    data = await state.get_data()
    assignment_id = data["assignment_id"]
    current_question_idx = data["current_question"]

    # Get assignment and questionnaire details
    assignment = await repo.questionnaires.get_assignment(assignment_id)
    questionnaire = assignment.questionnaire

    # Check if we've shown all questions
    if current_question_idx >= len(questionnaire.questions):
        # All questions have been answered, show summary and confirmation
        await show_answers_summary(message, state, repo)
        return

    # Get current question
    question_data = questionnaire.questions[current_question_idx]
    question_type = question_data.get("type", "free_form")
    question_text = question_data.get("question", "")

    # Format question number
    question_num = current_question_idx + 1
    total_questions = len(questionnaire.questions)

    # Prepare question message
    question_message = (
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {question_num}/{total_questions}</b>\n\n"
        f"{question_text}"
    )

    # Send question based on type
    if question_type == "multiple_choice":
        options = question_data.get("options", [])
        options_text = "\n".join([f"{i+1}. {option}" for i, option in enumerate(options)])

        await message.answer(
            f"{question_message}\n\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n{options_text}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."
        )
    else:
        # Free form question
        await message.answer(
            f"{question_message}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç."
        )


@user_router.message(QuestionnaireAnswering.answering)
async def process_answer(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
    """
    # Get current data from state
    data = await state.get_data()
    assignment_id = data["assignment_id"]
    current_question_idx = data["current_question"]
    answers = data.get("answers", {})

    # Get assignment and questionnaire details
    assignment = await repo.questionnaires.get_assignment(assignment_id)
    questionnaire = assignment.questionnaire
    question_data = questionnaire.questions[current_question_idx]
    question_type = question_data.get("type", "free_form")

    # Process answer based on the question type
    if question_type == "multiple_choice":
        options = question_data.get("options", [])

        try:
            # Try to parse as integer option number
            option_num = int(message.text.strip())

            # Check if option number is valid
            if 1 <= option_num <= len(options):
                selected_option = options[option_num - 1]

                # Save the answer
                answers[str(current_question_idx)] = {
                    "question": question_data.get("question", ""),
                    "answer": selected_option,
                    "option_index": option_num - 1
                }

                await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {selected_option}")
            else:
                await message.answer(
                    f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ {len(options)}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return  # Don't proceed to next question
        except ValueError:
            # Not a number, try to match text
            user_text = message.text.lower().strip()
            found_match = False

            for i, option in enumerate(options):
                if user_text == option.lower().strip():
                    answers[str(current_question_idx)] = {
                        "question": question_data.get("question", ""),
                        "answer": option,
                        "option_index": i
                    }
                    await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {option}")
                    found_match = True
                    break

            if not found_match:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É–∫–∞–∑–∞–≤ –µ–≥–æ –Ω–æ–º–µ—Ä.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return  # Don't proceed to next question
    else:
        # Free form question, save the text response
        answers[str(current_question_idx)] = {
            "question": question_data.get("question", ""),
            "answer": message.text
        }
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    # Update state with new answers and move to next question
    current_question_idx += 1
    await state.update_data(
        current_question=current_question_idx,
        answers=answers
    )

    # Show next question or summary if all questions are answered
    await show_current_question(message, state, repo)


async def show_answers_summary(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    data = await state.get_data()
    assignment_id = data["assignment_id"]
    answers = data.get("answers", {})

    # Get assignment details
    assignment = await repo.questionnaires.get_assignment(assignment_id)
    questionnaire = assignment.questionnaire

    # Prepare summary message
    summary_text = (
        f"üìã <b>–°–≤–æ–¥–∫–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å</b>\n"
        f"<b>{questionnaire.title}</b>\n\n"
    )

    # Add each question and answer to summary
    for i, question_data in enumerate(questionnaire.questions):
        question_idx = str(i)
        if question_idx in answers:
            answer = answers[question_idx]
            summary_text += (
                f"<b>–í–æ–ø—Ä–æ—Å {i+1}:</b> {answer['question']}\n"
                f"<b>–í–∞—à –æ—Ç–≤–µ—Ç:</b> {answer['answer']}\n\n"
            )

    # Add confirmation request
    summary_text += (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

    # Change state to confirmation
    await state.set_state(QuestionnaireAnswering.confirmation)

    # Send summary with confirm/cancel buttons
    await message.answer(
        summary_text,
        reply_markup=get_confirm_cancel_keyboard()
    )


@user_router.callback_query(QuestionnaireAnswering.confirmation, F.data == "confirm")
async def confirm_submission(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    """
    await callback.answer()

    data = await state.get_data()
    assignment_id = data["assignment_id"]
    answers = data.get("answers", {})

    # Save responses to database
    try:
        # Create response record
        response = await repo.responses.submit_response(
            assignment_id=assignment_id,
            student_id=callback.from_user.id,
            answers=answers
        )

        # Get assignment details for the thank you message
        assignment = await repo.questionnaires.get_assignment(assignment_id)

        # Confirm submission to user
        await callback.message.edit_text(
            f"‚úÖ <b>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ¬´{assignment.questionnaire.title}¬ª."
        )

        # Clear state
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b>\n{str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@user_router.callback_query(QuestionnaireAnswering.confirmation, F.data == "cancel")
async def cancel_submission(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    """
    await callback.answer()

    # Inform user
    await callback.message.edit_text(
        "‚ùå <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ —Å–Ω–æ–≤–∞."
    )

    # Clear state
    await state.clear()